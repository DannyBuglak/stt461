getwd()
getwd()
ds_salaries <- read.csv('ds_salaries.csv')[-1]
set.seed(20)
# Filter dataset by company location in US and experience level of Entry
entries_us <- ds_salaries[ds_salaries$company_location == "US" & ds_salaries$experience_level == "EN",]
# Store salaries greater than or equal to 100,000
salaries_above_100K <- entries_us$salary_in_usd >= 100000
# Simulate 10,000 times to estimate the probability
sims <- replicate(10000, sum(sample(salaries_above_100K, 10, replace = TRUE)) >= 8)
mean(sims)
set.seed(20)
# Filter dataset by company location in US and experience level of Entry
entries_us <- ds_salaries %>%
filter(ds_salaries$company_location == "US" & ds_salaries$experience_level == "EN")
library(dplyr)
library(dplyr)
set.seed(20)
# Filter dataset by company location in US and experience level of Entry
entries_us <- ds_salaries %>%
filter(ds_salaries$company_location == "US" & ds_salaries$experience_level == "EN")
# Store salaries greater than or equal to 100,000
salaries_above_100K <- entries_us$salary_in_usd >= 100000
# Simulate 10,000 times to estimate the probability
sims <- replicate(10000, sum(sample(salaries_above_100K, 10, replace = TRUE)) >= 8)
mean(sims)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$experience_level == "FT" & ds_salaries$work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_used, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD")
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$experience_level == "FT" & ds_salaries$work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD")
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$experience_level == "FT" & ds_salaries$work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks=10)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$experience_level == "FT" & ds_salaries$work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 30)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$experience_level == "FT" & ds_salaries$work_year == 2022)
entries_2022
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 30)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$experience_level == "FT")
entries_2022
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 30)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(experience_level == "FT")
entries_2022
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 30)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(experience_level == "FT")
ds_salaries
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 30)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$experience_level == "FT")
ds_salaries
entries_2022
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 30)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$employment_type == "FT" & ds_salaries$work_year == 2022)
ds_salaries
entries_2022
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 30)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$employment_type == "FT" & ds_salaries$work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 30)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$employment_type == "FT" & ds_salaries$work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 10)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(ds_salaries$employment_type == "FT" & ds_salaries$work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 25)
set.seed(20)
# Filter dataset by company location in US and experience level of Entry
entries_us <- ds_salaries %>%
filter(company_location == "US" & experience_level == "EN")
# Store salaries greater than or equal to 100,000
salaries_above_100K <- entries_us$salary_in_usd >= 100000
# Simulate 10,000 times to estimate the probability
sims <- replicate(10000, sum(sample(salaries_above_100K, 10, replace = TRUE)) >= 8)
mean(sims)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(employment_type == "FT" & work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 25)
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(employment_type == "FT" & work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 25)
# 90% confidence interval
# Simulate 10000
median_sims <- replicate(10000, median(sample(entries_2022$salary_in_usd, replace = TRUE)))
# Get the confidence interval
conf_interval <- quantile(median_sims, probs = c(0.05, 0.95))
# Print out the confidence interval
conf_interval
set.seed(20)
alpha = 0.01
# Filter for proper data sets
senior_exp <- ds_salaries %>%
filter(experience_level == "SE" & work_year == 2021)
mid.int_exp <- ds_salaries %>%
filter(experience_level == "MI" & work_year == 2021)
mean_senior_sal <- replicate(10000, mean(sample(senior_exp$salary_in_usd), replace = TRUE))
mean_senior_sal
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(employment_type == "FT" & work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 25)
# 90% confidence interval
# Simulate 10000
median_sims <- replicate(10000, median(sample(entries_2022$salary_in_usd, replace = TRUE)))
median_sims
# Get the confidence interval
conf_interval <- quantile(median_sims, probs = c(0.05, 0.95))
# Print out the confidence interval
conf_interval
set.seed(20)
# Filter by full time and the year 2022
entries_2022 <- ds_salaries %>%
filter(employment_type == "FT" & work_year == 2022)
# Plot the histogram
hist(entries_2022$salary_in_usd, main = "Histogram of Salaries in 2022 for Full Time Employee", xlab = "Salary in USD", breaks = 25)
# 90% confidence interval
# Simulate 10000
median_sims <- replicate(10000, median(sample(entries_2022$salary_in_usd, replace = TRUE)))
# Get the confidence interval
conf_interval <- quantile(median_sims, probs = c(0.05, 0.95))
# Print out the confidence interval
conf_interval
set.seed(20)
alpha = 0.01
# Filter for proper data sets
senior_exp <- ds_salaries %>%
filter(experience_level == "SE" & work_year == 2021)
mid.int_exp <- ds_salaries %>%
filter(experience_level == "MI" & work_year == 2021)
mean_senior_sal <- mean(sample(senior_exp$salary_in_usd)
mean_senior_sal
set.seed(20)
alpha = 0.01
# Filter for proper data sets
senior_exp <- ds_salaries %>%
filter(experience_level == "SE" & work_year == 2021)
mid.int_exp <- ds_salaries %>%
filter(experience_level == "MI" & work_year == 2021)
mean_senior_sal <- mean(sample(senior_exp$salary_in_usd))
mean_senior_sal
set.seed(20)
alpha = 0.01
# Filter for proper data sets
senior_exp <- ds_salaries %>%
filter(experience_level == "SE" & work_year == 2021)
mid.int_exp <- ds_salaries %>%
filter(experience_level == "MI" & work_year == 2021)
mean_senior_sal <- mean(sample(senior_exp$salary_in_usd))
mean_senior_sal
mean_mid.int_sal <- mean(sample(mid.int_exp$salary_in_usd))
mean_mid.int_sal
set.seed(20)
alpha = 0.01
# Filter for proper data sets
senior_exp <- ds_salaries %>%
filter(experience_level == "SE" & work_year == 2021)
mid.int_exp <- ds_salaries %>%
filter(experience_level == "MI" & work_year == 2021)
median_senior_sal <- median(sample(senior_exp$salary_in_usd))
median_mid.int_sal <- median(sample(mid.int_exp$salary_in_usd))
# Calculate the observed difference in median salary
obsv_diff <- median_senior_sal - median_mid.int_sal
set.seed(20)
alpha = 0.01
# Filter for proper data sets
senior_exp <- ds_salaries %>%
filter(experience_level == "SE" & work_year == 2021)
mid.int_exp <- ds_salaries %>%
filter(experience_level == "MI" & work_year == 2021)
median_senior_sal <- median(sample(senior_exp$salary_in_usd))
median_mid.int_sal <- median(sample(mid.int_exp$salary_in_usd))
# Calculate the observed difference in median salary
obsv_diff <- median_senior_sal - median_mid.int_sal
# Combine the data sets
combined <- c(senior_exp, mid.int_exp)
sims <- replicate(10000, {
# Get a sample of values from the combined data sets
samples <- sample(combined)
# Split the samples
seniors <- samples[1:length(senior_exp)]
mid.int <- samples[(length(senior_exp) + 1):(length(senior_exp) + length(mid.int_exp))]
# Find difference in medians
median(seniors) - median(mid.int)
})
set.seed(20)
alpha = 0.01
# Filter for proper data sets
senior_exp <- ds_salaries %>%
filter(experience_level == "SE" & work_year == 2021)
mid.int_exp <- ds_salaries %>%
filter(experience_level == "MI" & work_year == 2021)
median_senior_sal <- median(sample(senior_exp$salary_in_usd))
median_mid.int_sal <- median(sample(mid.int_exp$salary_in_usd))
# Calculate the observed difference in median salary
obsv_diff <- median_senior_sal - median_mid.int_sal
# Combine the data sets
combined <- c(senior_exp$salary_in_usd, mid.int_exp$salary_in_usd)
sims <- replicate(10000, {
# Get a sample of values from the combined data sets
samples <- sample(combined)
# Split the samples
seniors <- samples[1:length(senior_exp)]
mid.int <- samples[(length(senior_exp) + 1):(length(senior_exp) + length(mid.int_exp))]
# Find difference in medians
median(seniors) - median(mid.int)
})
p_value <- mean(abs(sims) >= abs(obsv_dif))
set.seed(20)
alpha = 0.01
# Filter for proper data sets
senior_exp <- ds_salaries %>%
filter(experience_level == "SE" & work_year == 2021)
mid.int_exp <- ds_salaries %>%
filter(experience_level == "MI" & work_year == 2021)
median_senior_sal <- median(sample(senior_exp$salary_in_usd))
median_mid.int_sal <- median(sample(mid.int_exp$salary_in_usd))
# Calculate the observed difference in median salary
obsv_diff <- median_senior_sal - median_mid.int_sal
# Combine the data sets
combined <- c(senior_exp$salary_in_usd, mid.int_exp$salary_in_usd)
sims <- replicate(10000, {
# Get a sample of values from the combined data sets
samples <- sample(combined)
# Split the samples
seniors <- samples[1:length(senior_exp)]
mid.int <- samples[(length(senior_exp) + 1):(length(senior_exp) + length(mid.int_exp))]
# Find difference in medians
median(seniors) - median(mid.int)
})
p_value <- mean(abs(sims) >= abs(obsv_diff))
p_value
us_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "US" & work_year == 2022)
de_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "DE" & work_year == 2022)
us_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "US" & work_year == 2022)
de_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "DE" & work_year == 2022)
t.test(us_salaries, de_salaries, alternative = "two.sided", conf.level = 0.99)
us_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "US" & work_year == 2022)
de_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "DE" & work_year == 2022)
t.test(us_salaries$salary_in_usd, de_salaries$salary_in_usd, alternative = "two.sided", conf.level = 0.99)
us_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "US" & work_year == 2022)
de_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "DE" & work_year == 2022)
t.test(us_salaries$salary, de_salaries$salary, alternative = "two.sided", conf.level = 0.99)
us_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "US" & work_year == 2022)
de_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "DE" & work_year == 2022)
de_salaries
t.test(us_salaries$salary, de_salaries$salary, alternative = "two.sided", conf.level = 0.99)
us_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "US" & work_year == 2022)
de_salaries <- ds_salaries %>%
filter(experience_level == "EN" & company_location == "DE" & work_year == 2022)
de_salaries
us_salaries
t.test(us_salaries$salary, de_salaries$salary, alternative = "two.sided", conf.level = 0.99)
set.seed(20)
alpha = 0.01
# Filter for proper data sets
senior_exp <- ds_salaries %>%
filter(experience_level == "SE" & work_year == 2021)
mid.int_exp <- ds_salaries %>%
filter(experience_level == "MI" & work_year == 2021)
median_senior_sal <- median(senior_exp$salary_in_usd)
median_mid.int_sal <- median(mid.int_exp$salary_in_usd)
# Calculate the observed difference in median salary
obsv_diff <- median_senior_sal - median_mid.int_sal
# Combine the data sets
combined <- c(senior_exp$salary_in_usd, mid.int_exp$salary_in_usd)
sims <- replicate(10000, {
# Get a sample of values from the combined data sets
samples <- sample(combined)
# Split the samples
seniors <- samples[1:length(senior_exp)]
mid.int <- samples[(length(senior_exp) + 1):(length(senior_exp) + length(mid.int_exp))]
# Find difference in medians
median(seniors) - median(mid.int)
})
p_value <- mean(abs(sims) >= abs(obsv_diff))
p_value
