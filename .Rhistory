geom_point()+
geom_smooth(method=lm, se=FALSE, fullrange=TRUE)
ggplot(te_gm, aes(x = FantasyPoints_gm, y = Rec_gm)) +
geom_point()+
geom_smooth(method=lm, se=FALSE, fullrange=TRUE)
ggplot(te_gm, aes(x = FantasyPoints_gm, y = ReceivingTD_gm)) +
geom_point()+
geom_smooth(method=lm, se=FALSE, fullrange=TRUE)
ggplot(te_gm, aes(x = FantasyPoints_gm, y = ReceivingYds_gm)) +
geom_point()+
geom_smooth(method=lm, se=FALSE, fullrange=TRUE)
set.seed(20)
# Remove name and team and omit any NA values
clust_fb <- fb1 %>%
select(-c("Player", "Tm")) %>%
na.omit()
# Scale the data to normalize it
normalized_fb <- scale(clust_fb[, sapply(clust_fb, is.numeric)])
# Determine the optimal number of clusters using Elbow method
elbow <- sapply(1:15, function(k) {
kmeans(normalized_fb, centers = k, nstart = 100)$tot.withinss
})
plot(1:15, elbow, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
points_counts <- table(clust_fb$cluster, clust_fb$FantasyPoints)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
# Visualize the clustering
fviz_cluster(list(data = normalized_fb, cluster = k$cluster))
# Format a table relating Games Started and cluster
gs_table <- table(clust_fb$cluster, clust_fb$GS)
gs_prop <- prop.table(gs_table, margin=1) * 100
gs_prop_formatted <- apply(gs_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
gs_prop_formatted
#fp_table <- table(clust_fb$cluster, clust_fb$FantasyPoints)
#fp_prop <- prop.table(fp_table, margin=1) * 100
#fp_prop_formatted <- apply(fp_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fp_prop_formatted
#fpG_table <- table(clust_fb$cluster, clust_fb$FantasyPoints_gm)
#fpG_prop <- prop.table(fpG_table, margin=1) * 100
#fpG_prop_formatted <- apply(fpG_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#pG_prop_formatted
# NOT SURE IF THESE ARE RIGHT YET
#ggplot(clust_fb, aes(x=factor(cluster), y=ReceivingYds_gm, fill=factor(cluster))) +
#  geom_boxplot() +
#  labs(x="Cluster", y="Receiving Yards per Game")
#ggplot(clust_fb, aes(x=factor(cluster), y=PassingTD_gm, fill=factor(cluster))) +
#  geom_boxplot() +
#  labs(x="Cluster", y="Passing Touchdowns per Game")
#ggplot(clust_fb, aes(x=factor(cluster), y=PassingYds_gm, fill=factor(cluster))) +
#  geom_boxplot() +
#  labs(x="Cluster", y="Passing Yards per Game")
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
# Visualize the clustering
fviz_cluster(list(data = normalized_fb, cluster = k$cluster))
#library(caret)
#clust_fb$cluster <- as.factor(clust_fb$cluster)
#confusionMatrix(clust_fb$cluster, clust_fb$Pos)
# NOT SURE IF THESE ARE RIGHT YET
ggplot(clust_fb, aes(x=factor(cluster), y=ReceivingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Receiving Yards per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=PassingTD_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Touchdowns per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=PassingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Yards per Game")
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
# Visualize the clustering
fviz_cluster(list(data = normalized_fb, cluster = k$cluster))
#library(caret)
#clust_fb$cluster <- as.factor(clust_fb$cluster)
#confusionMatrix(clust_fb$cluster, clust_fb$Pos)
# Format a table relating Games Started and cluster
gs_table <- table(clust_fb$cluster, clust_fb$GS)
gs_prop <- prop.table(gs_table, margin=1) * 100
gs_prop_formatted <- apply(gs_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
gs_prop_formatted
#fp_table <- table(clust_fb$cluster, clust_fb$FantasyPoints)
#fp_prop <- prop.table(fp_table, margin=1) * 100
#fp_prop_formatted <- apply(fp_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fp_prop_formatted
#fpG_table <- table(clust_fb$cluster, clust_fb$FantasyPoints_gm)
#fpG_prop <- prop.table(fpG_table, margin=1) * 100
#fpG_prop_formatted <- apply(fpG_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#pG_prop_formatted
# NOT SURE IF THESE ARE RIGHT YET
ggplot(clust_fb, aes(x=factor(cluster), y=ReceivingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Receiving Yards per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=PassingTD_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Touchdowns per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=PassingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Yards per Game")
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
# Visualize the clustering
fviz_cluster(list(data = normalized_fb, cluster = k$cluster))
#library(caret)
#clust_fb$cluster <- as.factor(clust_fb$cluster)
#confusionMatrix(clust_fb$cluster, clust_fb$Pos)
# Format a table relating Games Started and cluster
gs_table <- table(clust_fb$cluster, clust_fb$GS)
gs_prop <- prop.table(gs_table, margin=1) * 100
gs_prop_formatted <- apply(gs_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
gs_prop_formatted
fp_table <- table(clust_fb$cluster, clust_fb$FantasyPoints)
fp_prop <- prop.table(fp_table, margin=1) * 100
fp_prop_formatted <- apply(fp_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
fp_prop_formatted
fpG_table <- table(clust_fb$cluster, clust_fb$FantasyPoints_gm)
fpG_prop <- prop.table(fpG_table, margin=1) * 100
fpG_prop_formatted <- apply(fpG_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
pG_prop_formatted
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
# Visualize the clustering
fviz_cluster(list(data = normalized_fb, cluster = k$cluster))
#library(caret)
#clust_fb$cluster <- as.factor(clust_fb$cluster)
#confusionMatrix(clust_fb$cluster, clust_fb$Pos)
# Format a table relating Games Started and cluster
gs_table <- table(clust_fb$cluster, clust_fb$GS)
gs_prop <- prop.table(gs_table, margin=1) * 100
gs_prop_formatted <- apply(gs_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
gs_prop_formatted
fp_table <- table(clust_fb$cluster, clust_fb$FantasyPoints)
fp_prop <- prop.table(fp_table, margin=1) * 100
fp_prop_formatted <- apply(fp_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
fp_prop_formatted
fpG_table <- table(clust_fb$cluster, clust_fb$FantasyPoints_gm)
fpG_prop <- prop.table(fpG_table, margin=1) * 100
fpG_prop_formatted <- apply(fpG_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
fpG_prop_formatted
# NOT SURE IF THESE ARE RIGHT YET
ggplot(clust_fb, aes(x=factor(cluster), y=ReceivingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Receiving Yards per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=PassingTD_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Touchdowns per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=PassingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Yards per Game")
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
# Visualize the clustering
fviz_cluster(list(data = normalized_fb, cluster = k$cluster))
#library(caret)
#clust_fb$cluster <- as.factor(clust_fb$cluster)
#confusionMatrix(clust_fb$cluster, clust_fb$Pos)
# Format a table relating Games Started and cluster
gs_table <- table(clust_fb$cluster, clust_fb$GS)
gs_prop <- prop.table(gs_table, margin=1) * 100
gs_prop_formatted <- apply(gs_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
gs_prop_formatted
#fp_table <- table(clust_fb$cluster, clust_fb$FantasyPoints)
#fp_prop <- prop.table(fp_table, margin=1) * 100
#fp_prop_formatted <- apply(fp_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fp_prop_formatted
#fpG_table <- table(clust_fb$cluster, clust_fb$FantasyPoints_gm)
#fpG_prop <- prop.table(fpG_table, margin=1) * 100
#fpG_prop_formatted <- apply(fpG_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fpG_prop_formatted
# NOT SURE IF THESE ARE RIGHT YET
ggplot(clust_fb, aes(x=factor(cluster), y=ReceivingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Receiving Yards per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=FantasyPoints_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Yards per Game")
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
# Visualize the clustering
fviz_cluster(list(data = normalized_fb, cluster = k$cluster))
#library(caret)
#clust_fb$cluster <- as.factor(clust_fb$cluster)
#confusionMatrix(clust_fb$cluster, clust_fb$Pos)
# Format a table relating Games Started and cluster
gs_table <- table(clust_fb$cluster, clust_fb$GS)
gs_prop <- prop.table(gs_table, margin=1) * 100
gs_prop_formatted <- apply(gs_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
gs_prop_formatted
#fp_table <- table(clust_fb$cluster, clust_fb$FantasyPoints)
#fp_prop <- prop.table(fp_table, margin=1) * 100
#fp_prop_formatted <- apply(fp_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fp_prop_formatted
#fpG_table <- table(clust_fb$cluster, clust_fb$FantasyPoints_gm)
#fpG_prop <- prop.table(fpG_table, margin=1) * 100
#fpG_prop_formatted <- apply(fpG_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fpG_prop_formatted
# NOT SURE IF THESE ARE RIGHT YET
ggplot(clust_fb, aes(x=factor(cluster), y=ReceivingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Receiving Yards per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=PassingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Yards per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=FantasyPoints_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Fantasy Points per Game")
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
# Visualize the clustering
fviz_cluster(list(data = normalized_fb, cluster = k$cluster))
#library(caret)
#clust_fb$cluster <- as.factor(clust_fb$cluster)
#confusionMatrix(clust_fb$cluster, clust_fb$Pos)
# Format a table relating Games Started and cluster
gs_table <- table(clust_fb$cluster, clust_fb$GS)
gs_prop <- prop.table(gs_table, margin=1) * 100
gs_prop_formatted <- apply(gs_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
gs_prop_formatted
#fp_table <- table(clust_fb$cluster, clust_fb$FantasyPoints)
#fp_prop <- prop.table(fp_table, margin=1) * 100
#fp_prop_formatted <- apply(fp_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fp_prop_formatted
#fpG_table <- table(clust_fb$cluster, clust_fb$FantasyPoints_gm)
#fpG_prop <- prop.table(fpG_table, margin=1) * 100
#fpG_prop_formatted <- apply(fpG_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fpG_prop_formatted
# NOT SURE IF THESE ARE RIGHT YET
ggplot(clust_fb, aes(x=factor(cluster), y=ReceivingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Receiving Yards per Game")
# NOT SURE IF THESE ARE RIGHT YET
ggplot(clust_fb, aes(x=factor(cluster), y=GS, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Games Started")
ggplot(clust_fb, aes(x=factor(cluster), y=PassingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Yards per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=FantasyPoints_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Fantasy Points per Game")
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
# Visualize the clustering
fviz_cluster(list(data = normalized_fb, cluster = k$cluster))
#library(caret)
#clust_fb$cluster <- as.factor(clust_fb$cluster)
#confusionMatrix(clust_fb$cluster, clust_fb$Pos)
# Format a table relating Games Started and cluster
gs_table <- table(clust_fb$cluster, clust_fb$GS)
gs_prop <- prop.table(gs_table, margin=1) * 100
gs_prop_formatted <- apply(gs_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
gs_prop_formatted
#fp_table <- table(clust_fb$cluster, clust_fb$FantasyPoints)
#fp_prop <- prop.table(fp_table, margin=1) * 100
#fp_prop_formatted <- apply(fp_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fp_prop_formatted
#fpG_table <- table(clust_fb$cluster, clust_fb$FantasyPoints_gm)
#fpG_prop <- prop.table(fpG_table, margin=1) * 100
#fpG_prop_formatted <- apply(fpG_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fpG_prop_formatted
# NOT SURE IF THESE ARE RIGHT YET
ggplot(clust_fb, aes(x=factor(cluster), y=ReceivingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Receiving Yards per Game")
# NOT SURE IF THESE ARE RIGHT YET
ggplot(clust_fb, aes(x=factor(cluster), y=GS, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Games Started")
ggplot(clust_fb, aes(x=factor(cluster), y=PassingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Yards per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=FantasyPoints_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Fantasy Points per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=FantasyPoints, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Fantasy Points")
ggplot(clust_fb, aes(x=factor(cluster), y=ReceivingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Receiving Yards per Game")
# NOT SURE IF THESE ARE RIGHT YET
ggplot(clust_fb, aes(x=factor(cluster), y=GS, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Games Started")
ggplot(clust_fb, aes(x=factor(cluster), y=PassingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Yards per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=FantasyPoints_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Fantasy Points per Game")
ggplot(clust_fb, aes(x=factor(cluster), y=FantasyPoints, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Fantasy Points")
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
# Visualize the clustering
fviz_cluster(list(data = normalized_fb, cluster = k$cluster))
#library(caret)
#clust_fb$cluster <- as.factor(clust_fb$cluster)
#confusionMatrix(clust_fb$cluster, clust_fb$Pos)
# Format a table relating Games Started and cluster
gs_table <- table(clust_fb$cluster, clust_fb$GS)
gs_prop <- prop.table(gs_table, margin=1) * 100
gs_prop_formatted <- apply(gs_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
gs_prop_formatted
#fp_table <- table(clust_fb$cluster, clust_fb$FantasyPoints)
#fp_prop <- prop.table(fp_table, margin=1) * 100
#fp_prop_formatted <- apply(fp_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fp_prop_formatted
#fpG_table <- table(clust_fb$cluster, clust_fb$FantasyPoints_gm)
#fpG_prop <- prop.table(fpG_table, margin=1) * 100
#fpG_prop_formatted <- apply(fpG_prop, c(1, 2), function(x) paste0(round(x, 1), "%"))
#fpG_prop_formatted
# ALL X AXIS ARE THE CLUSTER
# RECEIVING YARDS PER GAME
ggplot(clust_fb, aes(x=factor(cluster), y=ReceivingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Receiving Yards per Game")
# GAMES STARTED
ggplot(clust_fb, aes(x=factor(cluster), y=GS, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Games Started")
# PASSING YARDS PER GAME
ggplot(clust_fb, aes(x=factor(cluster), y=PassingYds_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Passing Yards per Game")
# FANTASY POINTS PER GAME
ggplot(clust_fb, aes(x=factor(cluster), y=FantasyPoints_gm, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Fantasy Points per Game")
# TOTAL FANTASY POINTS
ggplot(clust_fb, aes(x=factor(cluster), y=FantasyPoints, fill=factor(cluster))) +
geom_boxplot() +
labs(x="Cluster", y="Fantasy Points")
set.seed(20)
# Performs k means on normalized data set
k <- kmeans(normalized_fb, centers = 4)
# Add cluster information to original data set
clust_fb$cluster <- k$cluster
# For factor or character variables, use table to get counts for each cluster
position_counts <- table(clust_fb$cluster, clust_fb$Pos)
get_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Apply the custom mode function to get the most common position per cluster
common_positions <- tapply(clust_fb$Pos, clust_fb$cluster, get_mode)
common_positions
# First, create a data frame with only numeric columns and cluster assignment
numeric_columns <- clust_fb %>% select(cluster, where(is.numeric))
# Aggregate the results to view the cluster summary
cluster_summary <- aggregate(. ~ cluster, data=numeric_columns, mean)
cluster_summary
